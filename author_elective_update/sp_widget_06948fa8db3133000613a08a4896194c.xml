<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="DELETE">
        <category>custom</category>
        <client_script><![CDATA[function($rootScope,$scope,spUtil) {
	/* widget controller */
	var c = this;
	// Use a position indicator to know which record to update
	c.notePos = 0;

	c.selectItem = function(idx) {  
		// Set the position indicator to the index value passed in on select
		c.notePos = idx;
		var id = c.data.notes[idx].sys_id;
		console.log('Note ID: ' + id);
		$rootScope.noteID = id;
		$rootScope.$emit('selectNote', id);
	}
	// Subscribe to event.  Set the new title and note values on the 
	// c.data object
	$rootScope.$on('updateTitle', function(event,data) { 
		c.data.notes[c.notePos].title = data.title;
		c.data.notes[c.notePos].note = data.note;
	});

	c.newNote = function() {
		c.server.get({
			action: 'newNote'
		}).then(function(r) {
			c.data.notes.unshift(r.data.newNote);
			c.data.noteID = r.data.noteID;
			$rootScope.noteID = c.data.noteID;
			$rootScope.$emit('selectNote', c.data.noteID);
		});
	}

	$rootScope.$on('deleteNote', function(event,data) {
		c.data.notes.splice($scope.notePos, 1);
	});

	// Record removed from data object on the client and passed to server
	c.snNoteUpdate = function(name,sysID){

		for (var i=0;i<c.data.notes.length;i++){
			if(c.data.notes[i].sys_id == name.data.sys_id){
				if(name.data.record.note){
					c.data.notes[i].note = name.data.record.note.display_value;
				}
				if(name.data.record.title){
					c.data.notes[i].title = name.data.record.title.display_value;
				}
				c.server.update();

			}
		}
	}

	// Record removed from data object on the server and passed back to client
	c.snNoteDelete = function(sysID){

		c.server.get({
			action: 'snDeleteNote',
			noteID: sysID

		}).then(function(r){
			c.data.notes = r.data.notes;
		});

	}

	spUtil.recordWatch($scope, "x_snc_createnotes_note", "numberANYTHING", function(name) {
		console.log(name.data.operation); 
		console.log(name); 
		// Calls a Client Script function to do the update and pass the updated data object
		// to the server.
		if(name.data.operation == "update"){
			c.snNoteUpdate(name, name.data.sys_id);
		}
		// Calls a Client Script function which does the update on the server and passes
		// the updated data object back to the client.
		if(name.data.operation == "delete"){
			c.snNoteDelete(name.data.sys_id);
		}
		// Fast and easy... replace the client data object with the server data object
		if(name.data.operation == "insert"){
			c.server.refresh();
		}
	});
}
]]></client_script>
        <controller_as>c</controller_as>
        <css>h3.panel-title {
  font-size:20px;
  padding-top:5px;
}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>notes_list</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>Notes List</name>
        <option_schema>[{"hint":"Specify a title for the Notes List widget","name":"title","section":"other","default_value":"Notes","label":"Title","type":"string"},{"hint":"Select the maximum number of records to display","name":"maximum_records_to_display","section":"other","default_value":"5","label":"Maximum records to display","type":"choice","choices":[{"label":"2","value":"2"},{"label":"3","value":"3"},{"label":"5","value":"5"},{"label":"6","value":"6"},{"label":"11","value":"11"},{"label":"13","value":"13"},{"label":"17","value":"17"}]}]</option_schema>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {

	data.notes = [];
	var noteGR = new GlideRecord('x_snc_createnotes_note');
	noteGR.addQuery('user', gs.getUser().getID());
	noteGR.orderByDesc('sys_created_on');
	noteGR.setLimit(options.maximum_records_to_display);
	noteGR.query();
	while (noteGR.next()) {
		var noteObj = {};

		$sp.getRecordDisplayValues(noteObj, noteGR, 'number,title,sys_id');

		noteObj.note = noteGR.getValue('note').slice(0,20);

		data.notes.push(noteObj);
	}

	if (input) {
		if (input.action == 'newNote') {
			var newNote = new GlideRecord('x_snc_createnotes_note');
			newNote.newRecord();
			var id = newNote.insert();
			data.noteID = id;
			data.newNote = {};
			$sp.getRecordValues(data.newNote,newNote,"title,note,sys_id");

		}

		if (input.action == 'snDeleteNote') {
			var delNote = new GlideRecord('x_snc_createnotes_note');
			// The notes record should already be gone.  Just
			// making sure it no longer exists.
			if(delNote.get(input.noteID)){
				delNote.deleteRecord();
			}

		}

	}
}
)();
]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2019-05-30 18:13:04</sys_created_on>
        <sys_id>06948fa8db3133000613a08a4896194c</sys_id>
        <sys_mod_count>15</sys_mod_count>
        <sys_name>Notes List</sys_name>
        <sys_package display_value="CreateNotes" source="x_snc_createnotes">df5fd9a5090232007f44e1046c8ff69f</sys_package>
        <sys_policy/>
        <sys_scope display_value="CreateNotes">df5fd9a5090232007f44e1046c8ff69f</sys_scope>
        <sys_update_name>sp_widget_06948fa8db3133000613a08a4896194c</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2019-05-30 23:08:20</sys_updated_on>
        <template><![CDATA[<div class="panel panel-default">
  <div class="panel-heading clearfix">
    <h3 class="panel-title pull-left">
      {{::c.options.title}}
    </h3>
    <button class="btn btn-default pull-right" ng-click="c.newNote()"> 
      <span class="glyphicon glyphicon-plus"></span> 
    </button>
  </div>
  <div class="panel-body"> 
    <input placeholder="Filter" class="form-control" ng-model="noteFilter" /> 
  </div>

  <div class="list-group">
    <a class="list-group-item" ng-click="c.selectItem($index)" ng-repeat="note in data.notes | filter: noteFilter">
      <h4 class="list-group-item-heading">
        {{note.title}}
      </h4>
      <p class="list-group-item-text">
        {{note.note}}
      </p>
    </a>
  </div>
</div>]]></template>
    </sp_widget>
<sys_update_version action="INSERT_OR_UPDATE">
        <action>DELETE</action>
        <application display_value="CreateNotes">df5fd9a5090232007f44e1046c8ff69f</application>
        <file_path/>
        <instance_id>e47140311b1ef1507d9d2f8dee4bcb24</instance_id>
        <instance_name>dev203920</instance_name>
        <name>sp_widget_06948fa8db3133000613a08a4896194c</name>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sp_widget"&gt;
    &lt;sp_widget action="INSERT_OR_UPDATE"&gt;
        &lt;category&gt;custom&lt;/category&gt;
        &lt;client_script&gt;&lt;![CDATA[function($rootScope,$scope,spUtil) {
	/* widget controller */
	var c = this;
	// Use a position indicator to know which record to update
	c.notePos = 0;

	c.selectItem = function(idx) {  
		// Set the position indicator to the index value passed in on select
		c.notePos = idx;
		var id = c.data.notes[idx].sys_id;
		console.log('Note ID: ' + id);
		$rootScope.noteID = id;
		$rootScope.$emit('selectNote', id);
	}
	// Subscribe to event.  Set the new title and note values on the 
	// c.data object
	$rootScope.$on('updateTitle', function(event,data) { 
		c.data.notes[c.notePos].title = data.title;
		c.data.notes[c.notePos].note = data.note;
	});

	c.newNote = function() {
		c.server.get({
			action: 'newNote'
		}).then(function(r) {
			c.data.notes.unshift(r.data.newNote);
			c.data.noteID = r.data.noteID;
			$rootScope.noteID = c.data.noteID;
			$rootScope.$emit('selectNote', c.data.noteID);
		});
	}

	$rootScope.$on('deleteNote', function(event,data) {
		c.data.notes.splice($scope.notePos, 1);
	});

	// Record removed from data object on the client and passed to server
	c.snNoteUpdate = function(name,sysID){

		for (var i=0;i&lt;c.data.notes.length;i++){
			if(c.data.notes[i].sys_id == name.data.sys_id){
				if(name.data.record.note){
					c.data.notes[i].note = name.data.record.note.display_value;
				}
				if(name.data.record.title){
					c.data.notes[i].title = name.data.record.title.display_value;
				}
				c.server.update();

			}
		}
	}

	// Record removed from data object on the server and passed back to client
	c.snNoteDelete = function(sysID){

		c.server.get({
			action: 'snDeleteNote',
			noteID: sysID

		}).then(function(r){
			c.data.notes = r.data.notes;
		});

	}

	spUtil.recordWatch($scope, "x_snc_createnotes_note", "numberANYTHING", function(name) {
		console.log(name.data.operation); 
		console.log(name); 
		// Calls a Client Script function to do the update and pass the updated data object
		// to the server.
		if(name.data.operation == "update"){
			c.snNoteUpdate(name, name.data.sys_id);
		}
		// Calls a Client Script function which does the update on the server and passes
		// the updated data object back to the client.
		if(name.data.operation == "delete"){
			c.snNoteDelete(name.data.sys_id);
		}
		// Fast and easy... replace the client data object with the server data object
		if(name.data.operation == "insert"){
			c.server.refresh();
		}
	});
}
]]&gt;&lt;/client_script&gt;
        &lt;controller_as&gt;c&lt;/controller_as&gt;
        &lt;css&gt;h3.panel-title {
  font-size:20px;
  padding-top:5px;
}&lt;/css&gt;
        &lt;data_table&gt;sp_instance&lt;/data_table&gt;
        &lt;demo_data/&gt;
        &lt;description/&gt;
        &lt;docs/&gt;
        &lt;field_list/&gt;
        &lt;has_preview&gt;true&lt;/has_preview&gt;
        &lt;id&gt;notes_list&lt;/id&gt;
        &lt;internal&gt;false&lt;/internal&gt;
        &lt;link&gt;&lt;![CDATA[function link(scope, element, attrs, controller) {  }]]&gt;&lt;/link&gt;
        &lt;name&gt;Notes List&lt;/name&gt;
        &lt;option_schema&gt;[{"hint":"Specify a title for the Notes List widget","name":"title","section":"other","default_value":"Notes","label":"Title","type":"string"},{"hint":"Select the maximum number of records to display","name":"maximum_records_to_display","section":"other","default_value":"5","label":"Maximum records to display","type":"choice","choices":[{"label":"2","value":"2"},{"label":"3","value":"3"},{"label":"5","value":"5"},{"label":"6","value":"6"},{"label":"11","value":"11"},{"label":"13","value":"13"},{"label":"17","value":"17"}]}]&lt;/option_schema&gt;
        &lt;public&gt;false&lt;/public&gt;
        &lt;roles/&gt;
        &lt;script&gt;&lt;![CDATA[(function() {

	data.notes = [];
	var noteGR = new GlideRecord('x_snc_createnotes_note');
	noteGR.addQuery('user', gs.getUser().getID());
	noteGR.orderByDesc('sys_created_on');
	noteGR.setLimit(options.maximum_records_to_display);
	noteGR.query();
	while (noteGR.next()) {
		var noteObj = {};

		$sp.getRecordDisplayValues(noteObj, noteGR, 'number,title,sys_id');

		noteObj.note = noteGR.getValue('note').slice(0,20);

		data.notes.push(noteObj);
	}

	if (input) {
		if (input.action == 'newNote') {
			var newNote = new GlideRecord('x_snc_createnotes_note');
			newNote.newRecord();
			var id = newNote.insert();
			data.noteID = id;
			data.newNote = {};
			$sp.getRecordValues(data.newNote,newNote,"title,note,sys_id");

		}

		if (input.action == 'snDeleteNote') {
			var delNote = new GlideRecord('x_snc_createnotes_note');
			// The notes record should already be gone.  Just
			// making sure it no longer exists.
			if(delNote.get(input.noteID)){
				delNote.deleteRecord();
			}

		}

	}
}
)();
]]&gt;&lt;/script&gt;
        &lt;servicenow&gt;false&lt;/servicenow&gt;
        &lt;sys_class_name&gt;sp_widget&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2019-05-30 18:13:04&lt;/sys_created_on&gt;
        &lt;sys_id&gt;06948fa8db3133000613a08a4896194c&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;15&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;Notes List&lt;/sys_name&gt;
        &lt;sys_package display_value="CreateNotes" source="x_snc_createnotes"&gt;df5fd9a5090232007f44e1046c8ff69f&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="CreateNotes"&gt;df5fd9a5090232007f44e1046c8ff69f&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sp_widget_06948fa8db3133000613a08a4896194c&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2019-05-30 23:08:20&lt;/sys_updated_on&gt;
        &lt;template&gt;&lt;![CDATA[&lt;div class="panel panel-default"&gt;
  &lt;div class="panel-heading clearfix"&gt;
    &lt;h3 class="panel-title pull-left"&gt;
      {{::c.options.title}}
    &lt;/h3&gt;
    &lt;button class="btn btn-default pull-right" ng-click="c.newNote()"&gt; 
      &lt;span class="glyphicon glyphicon-plus"&gt;&lt;/span&gt; 
    &lt;/button&gt;
  &lt;/div&gt;
  &lt;div class="panel-body"&gt; 
    &lt;input placeholder="Filter" class="form-control" ng-model="noteFilter" /&gt; 
  &lt;/div&gt;

  &lt;div class="list-group"&gt;
    &lt;a class="list-group-item" ng-click="c.selectItem($index)" ng-repeat="note in data.notes | filter: noteFilter"&gt;
      &lt;h4 class="list-group-item-heading"&gt;
        {{note.title}}
      &lt;/h4&gt;
      &lt;p class="list-group-item-text"&gt;
        {{note.note}}
      &lt;/p&gt;
    &lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;]]&gt;&lt;/template&gt;
    &lt;/sp_widget&gt;
&lt;/record_update&gt;</payload>
        <payload_hash>-118823514</payload_hash>
        <record_name>Notes List</record_name>
        <reverted_from/>
        <source>a344ab4553ea5210938e55e0a0490e47</source>
        <source_table>sys_upgrade_history</source_table>
        <state>previous</state>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-12-17 02:27:18</sys_created_on>
        <sys_id>b454eb4553ea5210938e55e0a0490e4a</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_recorded_at>193d270f5d60000001</sys_recorded_at>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-12-17 02:27:18</sys_updated_on>
        <type>Widget</type>
        <update_guid>7454eb4506ea5210efa2d277d2dc624a</update_guid>
        <update_guid_history>7454eb4506ea5210efa2d277d2dc624a:-118823514</update_guid_history>
    </sys_update_version>
    <sys_metadata_delete action="INSERT_OR_UPDATE">
        <sys_audit_delete display_value="Notes List">f45aab0d53ea5210938e55e0a0490e79</sys_audit_delete>
        <sys_class_name>sys_metadata_delete</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-12-17 02:53:31</sys_created_on>
        <sys_db_object display_value="" name="sp_widget">sp_widget</sys_db_object>
        <sys_id>97303550225845b08bb8fe94a091cd24</sys_id>
        <sys_metadata>06948fa8db3133000613a08a4896194c</sys_metadata>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Notes List</sys_name>
        <sys_package display_value="CreateNotes" source="x_snc_createnotes">df5fd9a5090232007f44e1046c8ff69f</sys_package>
        <sys_parent/>
        <sys_policy/>
        <sys_scope display_value="CreateNotes">df5fd9a5090232007f44e1046c8ff69f</sys_scope>
        <sys_scope_delete display_value="">64daa03572704d49a928bf08a985d6f9</sys_scope_delete>
        <sys_update_name>sp_widget_06948fa8db3133000613a08a4896194c</sys_update_name>
        <sys_update_version display_value="sp_widget_06948fa8db3133000613a08a4896194c">b454eb4553ea5210938e55e0a0490e4a</sys_update_version>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-12-17 02:53:31</sys_updated_on>
    </sys_metadata_delete>
</record_update>
